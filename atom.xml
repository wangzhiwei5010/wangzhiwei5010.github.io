<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钮玉の博客</title>
  
  
  <link href="https://blog.wangzhiwei.online/atom.xml" rel="self"/>
  
  <link href="https://blog.wangzhiwei.online/"/>
  <updated>2022-05-05T05:54:20.000Z</updated>
  <id>https://blog.wangzhiwei.online/</id>
  
  <author>
    <name>王志伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cas的0到1的过程</title>
    <link href="https://blog.wangzhiwei.online/2022/04/19/cas%E7%9A%840%E5%88%B01%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://blog.wangzhiwei.online/2022/04/19/cas%E7%9A%840%E5%88%B01%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2022-04-19T03:46:00.000Z</published>
    <updated>2022-05-05T05:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>CAS是Central Authentication Service的缩写，中央认证服务，一种独立开放指令协议。</p><span id="more"></span><ol><li><a href="/cas">准备工作</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;CAS是Central Authentication Service的缩写，中央认证服务，一种独立开放指令协议。&lt;/p&gt;</summary>
    
    
    
    <category term="sso" scheme="https://blog.wangzhiwei.online/categories/sso/"/>
    
    <category term="cas" scheme="https://blog.wangzhiwei.online/categories/sso/cas/"/>
    
    
    <category term="cas" scheme="https://blog.wangzhiwei.online/tags/cas/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化部署</title>
    <link href="https://blog.wangzhiwei.online/2022/02/23/%E8%99%9A%E6%8B%9F%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.wangzhiwei.online/2022/02/23/%E8%99%9A%E6%8B%9F%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2022-02-23T10:55:00.000Z</published>
    <updated>2022-02-24T08:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>centos,ubuntu,docker、k8s、mysql</p><span id="more"></span><h2 id="依赖环境准备"><a href="#依赖环境准备" class="headerlink" title="依赖环境准备"></a><a href="/virtual/os/index.html">依赖环境准备</a></h2><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a><a href="/virtual/soft/index.html">软件安装</a></h2><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;centos,ubuntu,docker、k8s、mysql&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.wangzhiwei.online/categories/linux/"/>
    
    
    <category term="virtual" scheme="https://blog.wangzhiwei.online/tags/virtual/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机VirtualBox的小结</title>
    <link href="https://blog.wangzhiwei.online/2021/11/15/VirtualBox/"/>
    <id>https://blog.wangzhiwei.online/2021/11/15/VirtualBox/</id>
    <published>2021-11-15T06:39:00.000Z</published>
    <updated>2021-11-15T06:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>virtual box的一些常用命令</p><span id="more"></span><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><ul><li><p>支持列表</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage list ostypes</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建虚拟机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage createvm --name <span class="string">"k8s-node-3"</span> --ostype Ubuntu_64 --register</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置内存大小，启动顺序，网络模式</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage modifyvm <span class="string">"k8s-node-3"</span> --memory 2048 --acpi on --boot1 dvd --nic1 bridged</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建一个磁盘镜像，指定大小（MB）</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage createhd --filename <span class="string">"k8s-node-3/CentOS.vdi"</span> --size 5000</span><br></pre></td></tr></tbody></table></figure><ul><li><p>调整大小</p>  <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">VBoxManage</span> <span class="string">modifyhd</span> <span class="string">k8s-node-1.vdi</span> <span class="string">--resize</span> <span class="number">20480</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>创建一个IDE存储控制器</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage storagectl <span class="string">"k8s-node-3"</span> --name <span class="string">"SATA"</span> --add sata --controller IntelAHCI</span><br></pre></td></tr></tbody></table></figure></li><li><p>将之前创建的镜像文件CentOS.vdi 添加到ide存储控制器中，并指定位置等。</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage storageattach <span class="string">"k8s-node-3"</span> --storagectl <span class="string">"SATA"</span> --port 0 --device 0 --<span class="built_in">type</span> hdd --medium k8s-node-3.vdi</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加光驱并添加系统盘ISO镜像文件。</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxmanage storageattach <span class="string">"CentOS 5.0"</span> --storagectl <span class="string">"IDE Controller"</span> --port 0 --device 1 --<span class="built_in">type</span> dvddrive --medium xxx-xxx-.iso</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置显卡驱动</p><p>  ``</p></li></ul><h2 id="操作主机"><a href="#操作主机" class="headerlink" title="操作主机"></a>操作主机</h2><ul><li><p>查看所有虚拟机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage list vms</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看正在运行的虚拟机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxmanage list runningvms</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动</p><ul><li><p>无界面启动</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxmanage startvm <span class="string">"CentOS-4"</span> --<span class="built_in">type</span> headless</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用gui类型启动虚拟机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage startvm XP --<span class="built_in">type</span> gui</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>正常关闭虚拟机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage controlvm <span class="string">"CentOS-4"</span> acpipowerbutton</span><br></pre></td></tr></tbody></table></figure></li><li><p>强制关机</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage controlvm <span class="string">"CentOS-2"</span> poweroff</span><br></pre></td></tr></tbody></table></figure></li><li><p>相关命令</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage list runningvms <span class="comment"># 列出运行中的虚拟机</span></span><br><span class="line">VBoxManage controlvm XP acpipowerbutton <span class="comment">#关闭虚拟机，等价于点击系统关闭按钮，正常关机</span></span><br><span class="line">VBoxManage controlvm XP poweroff <span class="comment"># 关闭虚拟机，等价于直接关闭电源，非正常关机</span></span><br><span class="line">VBoxManage controlvm XP pause <span class="comment"># 暂停虚拟机的运行</span></span><br><span class="line">VBoxManage controlvm XP resume <span class="comment"># 恢复暂停的虚拟机</span></span><br><span class="line">VBoxManage controlvm XP savestate <span class="comment"># 保存当前虚拟机的运行状态</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="网路"><a href="#网路" class="headerlink" title="网路"></a>网路</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage hostonlyif create</span><br><span class="line">VBoxManage list hostonlyifs</span><br><span class="line">VBoxManage hostonlyif remove vboxnet1</span><br><span class="line">VBoxManage dhcpserver modify -ifname vboxnet1 -server-ip=192.168.57.2 -netmask=255.255.255.0 -lowerip=192.168.57.100 -upperip=192.168.57.199 -<span class="built_in">enable</span></span><br><span class="line">VBoxManage dhcpserver modify -ifname vboxnet0 -server-ip=192.168.56.2 -netmask=255.255.255.0 -lowerip=192.168.56.100 -upperip=192.168.56.199 -<span class="built_in">enable</span></span><br></pre></td></tr></tbody></table></figure><h2 id="磁盘克隆"><a href="#磁盘克隆" class="headerlink" title="磁盘克隆"></a>磁盘克隆</h2><p>用命令克隆已经存在的.vdi文件，克隆后会自动更改UUID。打开cmd窗口，cd到VirtualBox的安装目录，命令如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage clonehd &lt;源vdi文件路径&gt; &lt;目标vdi文件路径&gt;</span><br></pre></td></tr></tbody></table></figure><p>先手动复制.vdi文件，然后用命令更改UUID。用如下命令更改UUID：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage internalcommands sethduuid</span><br></pre></td></tr></tbody></table></figure><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><h3 id="查看主机名的方法"><a href="#查看主机名的方法" class="headerlink" title="查看主机名的方法"></a>查看主机名的方法</h3><blockquote><p>在Ubuntu系统中，快速查看主机名有多种方法：</p></blockquote><ul><li><p>在终端中输入命令：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@itcast:~# hostname</span><br><span class="line">itcast</span><br></pre></td></tr></tbody></table></figure></li><li><p>在终端窗口中输入命令：uname -a可以查看到当前主机的主机名</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@itcast:~# <span class="built_in">uname</span> -a</span><br><span class="line">Linux itcast 4.10.0-28-generic <span class="comment">#32~16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@itcast:~#</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="临时修改主机名"><a href="#临时修改主机名" class="headerlink" title="临时修改主机名"></a>临时修改主机名</h3><ul><li><p>运行命令</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname 新主机名</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>其中“新主机名”可以用任何合法字符串来表示。不过采用这种方式，新主机名并不保存在系统中，重启系统后主机名将恢复为原先的主机名称。</p></blockquote><blockquote><p>这样主机名字就临时被修改为deng，但是终端下不会立即显示生效后的主机名，重开一个终端窗口(通过ssh连接的终端需要重新连接才可以);</p></blockquote><h3 id="永久修改主机名"><a href="#永久修改主机名" class="headerlink" title="永久修改主机名"></a>永久修改主机名</h3><blockquote><p>在Ubuntu系统中永久修改主机名也比较简单。主机名存放在/etc/hostname文件中，修改主机名时，编辑hostname文件，在文件中输入新的主机名并保存该文件即可。重启系统后，参照上面介绍的快速查看主机名的办法来确认主机名有没有修改成功。</p></blockquote><blockquote><p>值的指出的是，在其它Linux发行版中，并非都存在/etc/hostname文件。如Fedora发行版将主机名存放在/etc/sysconfig/network文件中。所以，修改主机名时应注意区分是哪种Linux发行版。</p></blockquote><ul><li><p>第一步： 修改/etc/hostname</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/etc/hostname中存放的是主机名，hostname文件的一个例子：</span><br><span class="line">root@itcast:~# vim /etc/hostname</span><br></pre></td></tr></tbody></table></figure></li><li><p>第二步：修改/etc/hosts配置文件（可选）</p><p>  /etc/hosts存放的是域名与ip的对应关系，域名与主机名没有任何关系，你可以为任何一个IP指定任意一个名字。</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1 k8s-master</span><br></pre></td></tr></tbody></table></figure></li><li><p>第三步：重启系统</p><p>  root@itcast:~# sudo reboot</p></li></ul><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul><li><p>安装</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-client</span><br></pre></td></tr></tbody></table></figure></li><li><p>扩展配置</p><p>  SSH默认服务端口为22，用户可以自已定义端口，如9090，需要修改的配置文件为</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure><p>  然后重启SSH服务：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure></li><li></li></ul><pre><code><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式</span></span><br><span class="line">Port 22　　　　　　　　　　<span class="comment"># SSH 预设使用 22 这个 port，您也可以使用多的 port ！</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 亦即重复使用 port 这个设定项目即可！</span></span><br><span class="line">Protocol 2,1　　　　　　　 <span class="comment"># 选择的 SSH 协议版本，可以是 1 也可以是 2 ，</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 如果要同时支持两者，就必须要使用 2,1 这个分隔了！</span></span><br><span class="line"><span class="comment">#ListenAddress 0.0.0.0　　 # 监听的主机适配卡！举个例子来说，如果您有两个 IP，</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 开放 192.168.0.100 时，就可以写如同下面的样式：</span></span><br><span class="line">ListenAddress 192.168.0.100          <span class="comment"># 只监听来自 192.168.0.100 这个 IP 的SSH联机。</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 如果不使用设定的话，则预设所有接口均接受 SSH</span></span><br><span class="line">PidFile /var/run/sshd.pid　　　　　　<span class="comment"># 可以放置 SSHD 这个 PID 的档案！左列为默认值</span></span><br><span class="line">LoginGraceTime 600　　　　 <span class="comment"># 当使用者连上 SSH server 之后，会出现输入密码的画面，</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 在该画面中，在多久时间内没有成功连上 SSH server ，</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 就断线！时间为秒！</span></span><br><span class="line">Compression <span class="built_in">yes</span>　　　　　　<span class="comment"># 是否可以使用压缩指令？当然可以啰！</span></span><br><span class="line">　</span><br><span class="line"><span class="comment"># 2. 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！</span></span><br><span class="line">HostKey /etc/ssh/ssh_host_key　　　　<span class="comment"># SSH version 1 使用的私钥</span></span><br><span class="line">HostKey /etc/ssh/ssh_host_rsa_key　　<span class="comment"># SSH version 2 使用的 RSA 私钥</span></span><br><span class="line">HostKey /etc/ssh/ssh_host_dsa_key　　<span class="comment"># SSH version 2 使用的 DSA 私钥</span></span><br><span class="line"><span class="comment"># 2.1 关于 version 1 的一些设定！</span></span><br><span class="line">KeyRegenerationInterval 3600　 　　　<span class="comment"># 由前面联机的说明可以知道， version 1 会使用 </span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># server 的 Public Key ，那么如果这个 Public </span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># Key 被偷的话，岂不完蛋？所以需要每隔一段时间</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 来重新建立一次！这里的时间为秒！</span></span><br><span class="line">ServerKeyBits 768 　　　　　　　　　 <span class="comment"># 没错！这个就是 Server key 的长度！</span></span><br><span class="line"><span class="comment"># 3. 关于登录文件的讯息数据放置与 daemon 的名称！</span></span><br><span class="line">SyslogFacility AUTH　　　　　　　　　<span class="comment"># 当有人使用 SSH 登入系统的时候，SSH会记录资</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 讯，这个信息要记录在什么 daemon name 底下？</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 预设是以 AUTH 来设定的，即是 /var/log/secure</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 里面！什么？忘记了！回到 Linux 基础去翻一下</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 其它可用的 daemon name 为：DAEMON,USER,AUTH,</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,</span></span><br><span class="line">LogLevel INFO　　　　　　　　　　　　<span class="comment"># 登录记录的等级！嘿嘿！任何讯息！</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 同样的，忘记了就回去参考！</span></span><br><span class="line"><span class="comment"># 4. 安全设定项目！极重要！</span></span><br><span class="line"><span class="comment"># 4.1 登入设定部分</span></span><br><span class="line">PermitRootLogin no　　 　　<span class="comment"># 是否允许 root 登入！预设是允许的，但是建议设定成 no！</span></span><br><span class="line">UserLogin no　　　　　　　 <span class="comment"># 在 SSH 底下本来就不接受 login 这个程序的登入！</span></span><br><span class="line">StrictModes <span class="built_in">yes</span>　　　　　　<span class="comment"># 当使用者的 host key 改变之后，Server 就不接受联机，</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 可以抵挡部分的木马程序！</span></span><br><span class="line"><span class="comment">#RSAAuthentication yes　　 # 是否使用纯的 RSA 认证！？仅针对 version 1 ！</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span>　 <span class="comment"># 是否允许 Public Key ？当然允许啦！只有 version 2</span></span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 上面这个在设定若要使用不需要密码登入的账号时，那么那个</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 账号的存放档案所在档名！</span></span><br><span class="line"><span class="comment"># 4.2 认证部分</span></span><br><span class="line">RhostsAuthentication no　　<span class="comment"># 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 不安全了，所以这里一定要设定为 no ！</span></span><br><span class="line">IgnoreRhosts <span class="built_in">yes</span>　　　　　 <span class="comment"># 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！</span></span><br><span class="line">RhostsRSAAuthentication no <span class="comment"># 这个选项是专门给 version 1 用的，使用 rhosts 档案在</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用</span></span><br><span class="line">HostbasedAuthentication no <span class="comment"># 这个项目与上面的项目类似，不过是给 version 2 使用的！</span></span><br><span class="line">IgnoreUserKnownHosts no　　<span class="comment"># 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 的主机内容？当然不要忽略，所以这里就是 no 啦！</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span> <span class="comment"># 密码验证当然是需要的！所以这里写 yes 啰！</span></span><br><span class="line">PermitEmptyPasswords no　　<span class="comment"># 若上面那一项如果设定为 yes 的话，这一项就最好设定</span></span><br><span class="line">　　　　　　　　　　　　　 <span class="comment"># 为 no ，这个项目在是否允许以空的密码登入！当然不许！</span></span><br><span class="line">ChallengeResponseAuthentication <span class="built_in">yes</span>  <span class="comment"># 挑战任何的密码认证！所以，任何 login.conf </span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 规定的认证方式，均可适用！</span></span><br><span class="line"><span class="comment">#PAMAuthenticationViaKbdInt yes      # 是否启用其它的 PAM 模块！启用这个模块将会</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　 <span class="comment"># 导致 PasswordAuthentication 设定失效！</span></span><br><span class="line">　</span><br><span class="line"><span class="comment"># 4.3 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！</span></span><br><span class="line"><span class="comment">#KerberosAuthentication no</span></span><br><span class="line"><span class="comment">#KerberosOrLocalPasswd yes</span></span><br><span class="line"><span class="comment">#KerberosTicketCleanup yes</span></span><br><span class="line"><span class="comment">#KerberosTgtPassing no</span></span><br><span class="line">　</span><br><span class="line"><span class="comment"># 4.4 底下是有关在 X-Window 底下使用的相关设定！</span></span><br><span class="line">X11Forwarding <span class="built_in">yes</span></span><br><span class="line"><span class="comment">#X11DisplayOffset 10</span></span><br><span class="line"><span class="comment">#X11UseLocalhost yes</span></span><br><span class="line"><span class="comment"># 4.5 登入后的项目：</span></span><br><span class="line">PrintMotd no              <span class="comment"># 登入后是否显示出一些信息呢？例如上次登入的时间、地点等</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！</span></span><br><span class="line">PrintLastLog <span class="built_in">yes</span>　　　　　<span class="comment"># 显示上次登入的信息！可以啊！预设也是 yes ！</span></span><br><span class="line">KeepAlive <span class="built_in">yes</span>　　　　　　 <span class="comment"># 一般而言，如果设定这项目的话，那么 SSH Server 会传送</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># KeepAlive 的讯息给 Client 端，以确保两者的联机正常！</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 有僵尸程序的发生！</span></span><br><span class="line">UsePrivilegeSeparation <span class="built_in">yes</span> <span class="comment"># 使用者的权限设定项目！就设定为 yes 吧！</span></span><br><span class="line">MaxStartups 10　　　　　　<span class="comment"># 同时允许几个尚未登入的联机画面？当我们连上 SSH ，</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 在这个联机画面中，为了保护主机，所以需要设定最大值，</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 预设最多十个联机画面，而已经建立联机的不计算在这十个当中</span></span><br><span class="line"><span class="comment"># 4.6 关于使用者抵挡的设定项目：</span></span><br><span class="line">DenyUsers *　　　　　　　 <span class="comment"># 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部</span></span><br><span class="line">　　　　　　　　　　　　　<span class="comment"># 挡吧！若是部分使用者，可以将该账号填入！例如下列！</span></span><br><span class="line">DenyUsers <span class="built_in">test</span></span><br><span class="line">DenyGroups <span class="built_in">test</span>　　　　　 <span class="comment"># 与 DenyUsers 相同！仅抵挡几个群组而已！</span></span><br><span class="line"><span class="comment"># 5. 关于 SFTP 服务的设定项目！</span></span><br><span class="line">Subsystem       sftp    /usr/lib/ssh/sftp-server</span><br></pre></td></tr></tbody></table></figure></code></pre><p>LVM</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;virtual box的一些常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://blog.wangzhiwei.online/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="shell" scheme="https://blog.wangzhiwei.online/tags/shell/"/>
    
    <category term="virtualbox" scheme="https://blog.wangzhiwei.online/tags/virtualbox/"/>
    
    <category term="cmd" scheme="https://blog.wangzhiwei.online/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>版本管理软件git</title>
    <link href="https://blog.wangzhiwei.online/2021/11/14/git/"/>
    <id>https://blog.wangzhiwei.online/2021/11/14/git/</id>
    <published>2021-11-14T22:36:00.000Z</published>
    <updated>2021-11-15T06:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 的一些常用命令</p><span id="more"></span><h1 id="git-cmd"><a href="#git-cmd" class="headerlink" title="git cmd"></a>git cmd</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Untracked files → 文件未被跟踪，即未添加到缓存区</span><br><span class="line">Changes <span class="keyword">to</span> be committed → 文件已经在缓存区，这是下次提交的内容</span><br><span class="line">Changes but <span class="keyword">not</span> updated → 文件被修改，但未添加到缓存区</span><br><span class="line">git <span class="keyword">commit</span> <span class="operator">-</span>m ""  只会提交添加到缓存区的文件（只提交添加的）</span><br><span class="line">git <span class="keyword">commit</span> <span class="operator">-</span>a <span class="operator">-</span>m ""  能提交修改过，但是没有添加到缓存区的文件（修改过的就能提交）</span><br><span class="line">git remote <span class="keyword">add</span> origin git<span class="variable">@codeup</span>.aliyun.com:youpinsanyue<span class="operator">/</span>ypsy<span class="operator">/</span>common<span class="operator">-</span>model.git</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="operator">-</span>u origin master</span><br><span class="line">git push <span class="comment">--set-upstream origin master</span></span><br></pre></td></tr></tbody></table></figure><h1 id="git-message"><a href="#git-message" class="headerlink" title="git message"></a>git message</h1><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>type<span class="operator">&gt;</span>(<span class="operator">&lt;</span><span class="keyword">scope</span><span class="operator">&gt;</span>): <span class="operator">&lt;</span>subject<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 空一行</span><br><span class="line"><span class="operator">&lt;</span>body<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 空一行</span><br><span class="line"><span class="operator">&lt;</span>footer<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type用于说明 commit 的类别，只允许使用下面7个标识。</p><ul><li>7个标识说明<ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li><li>revert: 用于撤销以前的 commit 详见后面特殊情况注释</li></ul></li></ul><p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>subject是 commit 目的的简短描述，不超过50个字符。</p><ul><li>描述规范<ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></li></ul><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, <span class="keyword">if</span> necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. </span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">- Bullet points are okay, too</span><br><span class="line">- Use a hanging indent</span><br></pre></td></tr></tbody></table></figure><ul><li><p>有两个注意点</p><p>  （1）使用第一人称现在时，比如使用<code>change</code>而不是<code>changed</code>或<code>changes</code>。</p><p>  （2）应该说明代码变动的动机，以及与以前行为的对比。</p></li></ul><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>Footer 部分只用于两种情况。</p><h3 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: {</span><br><span class="line">      myAttr: <span class="string">'attribute'</span>,</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: {</span><br><span class="line">      myAttr: <span class="string">'@'</span>,</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn<span class="string">'t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h3><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#234</span></span><br></pre></td></tr></tbody></table></figure><p>也可以一次关闭多个 issue 。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#123, #245, #992</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add <span class="string">'graphiteWidth'</span> option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></tbody></table></figure><p>Body部分的格式是固定的，必须写成<code>This reverts commit &amp;lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h1 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（<a href="https://github.com/ajoslin/conventional-changelog/blob/master/CHANGELOG.md">例1</a>，<a href="https://github.com/karma-runner/karma/blob/master/CHANGELOG.md">例2</a>，<a href="https://github.com/btford/grunt-conventional-changelog/blob/master/CHANGELOG.md">例3</a>）。</p><p>生成的文档包括以下三个部分。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line">Bug fixes</span><br><span class="line">Breaking changes.</span><br></pre></td></tr></tbody></table></figure><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><h1 id="commit-template"><a href="#commit-template" class="headerlink" title="commit template"></a>commit template</h1><p>格式基本规约：50/72格式化</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br><span class="line"><span class="comment"># - type: feat, fix, docs, style, refactor, test, chore</span></span><br><span class="line"><span class="comment"># - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)</span></span><br><span class="line"><span class="comment"># - subject: start with verb (such as 'change'), 50-character line#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># body: 72-character wrapped. This should answer:</span></span><br><span class="line"><span class="comment"># * Why was this change necessary?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * How does it address the problem?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * Are there any side effects?#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># footer: </span></span><br><span class="line"><span class="comment"># - Include a link to the ticket, if any.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - BREAKING CHANGE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commitizen</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;git 的一些常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://blog.wangzhiwei.online/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="git" scheme="https://blog.wangzhiwei.online/tags/git/"/>
    
    <category term="version" scheme="https://blog.wangzhiwei.online/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>轻型目录访问协议</title>
    <link href="https://blog.wangzhiwei.online/2021/11/14/ldap/"/>
    <id>https://blog.wangzhiwei.online/2021/11/14/ldap/</id>
    <published>2021-11-14T22:33:00.000Z</published>
    <updated>2021-11-15T06:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>部署自己的ldap服务,实现统一登录管理</p><span id="more"></span><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-p</span> <span class="number">389</span><span class="string">:389</span> <span class="string">--name</span> <span class="string">myopenldap</span> <span class="string">--network</span> <span class="string">bridge</span> <span class="string">--hostname</span> <span class="string">openldap-host</span> <span class="string">--env</span> <span class="string">LDAP_ORGANISATION="mylitboy"</span> <span class="string">--env</span> <span class="string">LDAP_DOMAIN="mylitboy.com"</span> <span class="string">--env</span> <span class="string">LDAP_ADMIN_PASSWORD="ldap123"</span> <span class="string">--detach</span> <span class="string">osixia/openldap</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--privileged</span> <span class="string">-p</span> <span class="number">10004</span><span class="string">:80</span> <span class="string">--name</span> <span class="string">myphpldapadmin</span> <span class="string">--env</span> <span class="string">PHPLDAPADMIN_HTTPS=false</span> <span class="string">--env</span> <span class="string">PHPLDAPADMIN_LDAP_HOSTS=172.17.0.3</span> <span class="string">--detach</span> <span class="string">osixia/phpldapadmin</span></span><br></pre></td></tr></tbody></table></figure><p>1、登录<br>在运行成功后访问运行成功的phpldapadmin，地址为：192.168.106.150:8080，如图所示</p><p>点击登录，用户名为cn=admin,dc=mylitboy,dc=com 密码：ldap123</p><p>2、在界面新建组与用户</p><p>先创建一个组织单元比如创建一个产品部：</p><p>然后在该部门中创建组，或者不在细分的话也可直接创建用户。为了演示我就都先创建组然后创建用户。<br>同样点击刚创建好的product部的条目，点击create a child entry，选择Posix Group，创建一个开发组。</p><p>在新建的组下添加用户，选中developmnt条目，创建子条目，选择User Account或Account，推荐使用User Account，因为User Account中包含了Account，还增加了更多的属性。</p><p>填写完之后提交，创建成功</p><p>此时该用户的dn为cn=zhang san,cn=development,ou=product,dc=example,dc=com，如果想使用uid来识别用户可以在界面中rename修改用户的dn。</p><p>3、在ldap中使用memberOf属性<br>在一些组件的继承中需要用到memberOf属性去同步用户的一些角色信息，但是posixGroup组并没有提供这个属性，所以我们需要新建一个拥有groupOfUniqueNames的用户组条目。<br>我们在product部门条目下创建一个拥有groupOfUniqueNames的用户组条目，第一步先选择创建子条目，第二部选择默认模板。</p><p>选择groupOfUniqueNames，点击下一步</p><p>rdn选择ou或者cn都可以（rdn：一般指dn逗号最左边的部分，如cn=zhang san,cn=development,ou=product,dc=example,dc=com中rdn为cn=zhang san。它与RootDN不同，RootDN通常与RootPW同时出现，特指管理LDAP中信息的最高权限用户。）<br>然后选择此组内包含的成员，点击这个搜索按钮，选择对应的人员，我们选择uid=zsan的用户。</p><p>注意填写改组的ou属性。</p><p>然后点击创建。<br>点进admin的组中 我们就可以看到已经添加成功的uid=zsan的用户。</p><p>我们也可进入容器去进行验证。<br>进入容器</p><p>docker exec -it 容器id /bash/bin<br>1<br>使用命令：</p><p>ldapsearch -LL  -H ldapi:/// -D “cn=admin,dc=xxx,dc=xxx” -W “(uid=所要搜索的uid)” -b dc=xxx,dc=xxx memberOf<br>1<br>效果如下</p><p>如果未出现红框中结果，则未配置成功。<br>注意：当前docker安装的最新版的openLDAP默认开启了memberOf属性，如果是其他方式安装的openLDAP可以参考<a href="https://wandouduoduo.github.io/articles/53f92c3c.html">https://wandouduoduo.github.io/articles/53f92c3c.html</a></p><p>4、在界面使用LDIF 文件进行组与用户的创建。</p><p>在界面选择import，可直接输入LDIF文件内容，也可导入对应的LDIF文件，如创建一个product部门下的deploy组。</p><p>创建成功</p><p>在deploy组下创建一个uid=lisi的人员</p><p>创建成功</p><p>LDIF文件可以从相似的条目中导出，然后稍作修改后进行创建。如图</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;部署自己的ldap服务,实现统一登录管理&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://blog.wangzhiwei.online/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="ldap" scheme="https://blog.wangzhiwei.online/tags/ldap/"/>
    
    <category term="php" scheme="https://blog.wangzhiwei.online/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>过去一年的总结</title>
    <link href="https://blog.wangzhiwei.online/2021/11/12/look-back/"/>
    <id>https://blog.wangzhiwei.online/2021/11/12/look-back/</id>
    <published>2021-11-12T16:52:00.000Z</published>
    <updated>2021-11-13T00:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>人就怕咸鱼,还是动一动的好!一点一点来</p><span id="more"></span><p>…待完善</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人就怕咸鱼,还是动一动的好!一点一点来&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://blog.wangzhiwei.online/2021/11/12/kafka/"/>
    <id>https://blog.wangzhiwei.online/2021/11/12/kafka/</id>
    <published>2021-11-12T00:37:00.000Z</published>
    <updated>2021-11-17T10:56:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>ack模式调整 + 重试机制 + 规避重试机制下带来的问题</p><span id="more"></span><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line"><span class="attr">producer:</span></span><br><span class="line">      <span class="comment">#这个参数可以是任意字符串，它是broker用来识别消息是来自哪个客户端的。在broker进行打印日志、衡量指标或者配额限制时会用到。</span></span><br><span class="line">      <span class="attr">clientId:</span> <span class="string">${spring.application.name}</span> <span class="comment">#方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">      <span class="comment">#acks=0：生产者把消息发送到broker即认为成功，不等待broker的处理结果。这种方式的吞吐最高，但也是最容易丢失消息的。</span></span><br><span class="line">      <span class="comment">#acks=1：生产者会在该分区的leader写入消息并返回成功后，认为消息发送成功。如果群首写入消息失败，生产者会收到错误响应并进行重试。这种方式能够一定程度避免消息丢失，但如果leader宕机时该消息没有复制到其他副本，那么该消息还是会丢失。另外，如果我们使用同步方式来发送，延迟会比前一种方式大大增加（至少增加一个网络往返时间）；如果使用异步方式，应用感知不到延迟，吞吐量则会受异步正在发送中的数量限制。</span></span><br><span class="line">      <span class="comment">#acks=all：生产者会等待所有副本成功写入该消息，这种方式是最安全的，能够保证消息不丢失，但是延迟也是最大的。</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span> <span class="comment">#默认值：1</span></span><br><span class="line">      <span class="comment">#当生产者发送消息收到一个可恢复异常时，会进行重试，这个参数指定了重试的次数。在实际情况中，这个参数需要结合retry.backoff.ms来使用，建议总的重试时间比集群重新选举leader的时间长，这样可以避免生产者过早结束重试导致失败。</span></span><br><span class="line">      <span class="comment">#另外需注意，当开启重试时，若未设置max.in.flight.requests.per.connection=1，则可能出现发往同一个分区的两批消息的顺序出错，比如，第一批发送失败了，第二批成功了，然后第一批重试成功了，此时两者的顺序就颠倒了。</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">2</span>  <span class="comment">#发送失败时重试多少次，0=禁用重试（默认值）</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">retry-backoff-ms:</span> <span class="number">1000</span> <span class="comment">#重试等待间隔</span></span><br><span class="line">      <span class="comment">#默认情况下消息是不压缩的，此参数可指定采用何种算法压缩消息，可取值：none,snappy,gzip,lz4。snappy压缩算法由Google研发，这种算法在性能和压缩比取得比较好的平衡；相比之下，gzip消耗更多的CPU资源，但是压缩效果也是最好的。通过使用压缩，我们可以节省网络带宽和Kafka存储成本。</span></span><br><span class="line">      <span class="attr">compressionType:</span> <span class="string">"none"</span> <span class="comment">#如果不开启压缩，可设置为none（默认值），比较大的消息可开启。</span></span><br><span class="line">      <span class="comment">#当多条消息发送到一个分区时，Producer会进行批量发送，这个参数指定了批量消息大小的上限（以字节为单位）。当批量消息达到这个大小时，Producer会一起发送到broker；但即使没有达到这个大小，生产者也会有定时机制来发送消息，避免消息延迟过大。</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">16384</span> <span class="comment">#默认16K，值越小延迟越低，但是吞吐量和性能会降低。0=禁用批量发送</span></span><br><span class="line">      <span class="comment">#这个参数设置Producer暂存待发送消息的缓冲区内存的大小，如果应用调用send方法的速度大于Producer发送的速度，那么调用会阻塞一定（max.block.ms）时间后抛出异常。</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">33554432</span> <span class="comment">#缓冲区默认大小32M</span></span><br></pre></td></tr></tbody></table></figure><p>生产者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//该类需要为多列类型</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFuture</span> <span class="keyword">implements</span> <span class="title class_">FailureCallback</span>, SuccessCallback&lt;SendResult&lt;String, Object&gt;&gt; {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProducerFuture.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> String uniqueId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topicLcs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String topicLcs, String value)</span> {</span><br><span class="line">        uniqueId = MDC.get(<span class="string">"UNIQUE_ID"</span>);</span><br><span class="line">        logger.info(<span class="string">"send {} data:{}"</span>, topicLcs, value);</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; listenableFuture = kafkaTemplate.send(topicLcs, value);</span><br><span class="line">        listenableFuture.addCallback(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> {</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        <span class="comment">//重试策略失败后，将进入该方法。在该重试方法中，可以做其他响应的业务逻辑，如告警、投放其他队列或落地失败的消息内容等</span></span><br><span class="line">        logger.error(<span class="string">"sendFailure:"</span>, ex);</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, Object&gt; result)</span> {</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        logger.info(<span class="string">"sendSuccess {} "</span>, result.getRecordMetadata().topic() + result.getRecordMetadata().offset());</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>启用重试机制后带来的问题</strong></p><ol><li>重试过程中，一条消息只会向同一个分区进行重试发送，所以在重试的机制下，也能保证消息的全局幂等性</li><li>由于重试，可能导致消息在 Node 中的顺序和 Producer 发送时的顺序不一致。可以对max.in.flight.requests.per.connectio（限制每个连接（指客户端与 Node 之间的 per.connection 连接）最多缓存 已发送但未收到响应的请求数，默认为5）设置为1，即可保证在重试机制下的消息顺序。<br>手动提交 offset + 重试机制 + 死信队列（告警） + 死信队列消息采用其他策略去处理消息</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kafka配置，更多配置请参考：KafkaProperties</span></span><br><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line"><span class="comment">#消费者的配置，可参考：org.apache.kafka.clients.consumer.ConsumerConfig</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="comment">#暂不用提供clientId，2.x版本可放出来，1.x有多个topic且concurrency&gt;1会出现JMX注册时异常</span></span><br><span class="line">    <span class="comment">#clientId: ${spring.application.name} #方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">    <span class="comment"># kafka集群</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">    <span class="comment">#指定了当消费者第一次读取分区或者无offset时拉取那个位置的消息，可以取值为latest（从最新的消息开始消费）,earliest（从最早的消息开始消费）,none（如果无offset就抛出异常）</span></span><br><span class="line">    <span class="attr">autoOffsetReset:</span> <span class="string">latest</span> <span class="comment">#默认值：latest</span></span><br><span class="line">    <span class="comment">#指定了消费者是否自动提交消费位移，默认为true。如果为true，你可能需要关注自动提交的时间间隔，该间隔由auto.commit.interval.ms设置。</span></span><br><span class="line">    <span class="attr">enable-auto-commit:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#周期性自动提交的间隔，单位毫秒</span></span><br><span class="line">    <span class="attr">auto-commit-interval:</span> <span class="number">2000</span> <span class="comment">#默认值：5000</span></span><br><span class="line">    <span class="comment">#参数允许消费者指定从broker读取消息时最小的Payload的字节数。当消费者从broker读取消息时，如果数据字节数小于这个阈值，broker会等待直到有足够的数据，然后才返回给消费者。对于写入量不高的主题来说，这个参数可以减少broker和消费者的压力，因为减少了往返的时间。而对于有大量消费者的主题来说，则可以明显减轻broker压力。</span></span><br><span class="line">    <span class="attr">fetchMinSize:</span> <span class="number">1</span> <span class="comment">#默认值： 1</span></span><br><span class="line">    <span class="comment">#上面的fetch.min.bytes参数指定了消费者读取的最小数据量，而这个参数则指定了消费者读取时最长等待时间，从而避免长时间阻塞。这个参数默认为500ms。</span></span><br><span class="line">    <span class="attr">fetchMaxWait:</span> <span class="number">500</span> <span class="comment">#默认值：500毫秒</span></span><br><span class="line">    <span class="comment">#这个参数控制一个poll()调用返回的记录数，即consumer每次批量拉多少条数据。</span></span><br><span class="line">    <span class="attr">maxPollRecords:</span> <span class="number">500</span> <span class="comment">#默认值：500</span></span><br></pre></td></tr></tbody></table></figure><p>config</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> {</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Config.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String error_topic=<span class="string">"error_topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory <span class="title function_">listenerContainerFactory</span><span class="params">(ConsumerFactory consumerFactory, KafkaTemplate&lt;String,Object&gt; template)</span> {</span><br><span class="line">        <span class="type">ConcurrentKafkaListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory);</span><br><span class="line">        <span class="comment">// 最大重试次数5次，每次间隔5s(该配置需要参考 Broker.leader 切换的平均时间去设置)</span></span><br><span class="line">        <span class="type">SeekToCurrentErrorHandler</span> <span class="variable">seekToCurrentErrorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeekToCurrentErrorHandler</span>((consumerRecord, e) -&gt; {</span><br><span class="line">            logger.error(<span class="string">"重试机制后异常，consumerRecord：{}"</span>, consumerRecord.toString(), e);</span><br><span class="line">            <span class="comment">//做其他业务操作，如记录异常信息到表，发送信息到其他的队列人工核对处理等</span></span><br><span class="line">            template.send(error_topic,consumerRecord.toString());</span><br><span class="line">        }, <span class="keyword">new</span> <span class="title class_">FixedBackOff</span>(<span class="number">5000</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//       批量获取消息的时候，使用该方式</span></span><br><span class="line"><span class="comment">//        SeekToCurrentBatchErrorHandler batchErrorHandler = new SeekToCurrentBatchErrorHandler();</span></span><br><span class="line"></span><br><span class="line">        factory.setErrorHandler(seekToCurrentErrorHandler);</span><br><span class="line">        <span class="comment">//设置提交偏移量的方式 ,否则出现异常的时候, 会报错No Acknowledgment available as an argument, the listener container must have a MANUAL AckMode to populate the Acknowledgment.</span></span><br><span class="line">        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ack模式调整 + 重试机制 + 规避重试机制下带来的问题&lt;/p&gt;</summary>
    
    
    
    <category term="config" scheme="https://blog.wangzhiwei.online/categories/config/"/>
    
    
    <category term="kafka" scheme="https://blog.wangzhiwei.online/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>随机生成端口</title>
    <link href="https://blog.wangzhiwei.online/2021/11/12/random-port/"/>
    <id>https://blog.wangzhiwei.online/2021/11/12/random-port/</id>
    <published>2021-11-12T00:34:00.000Z</published>
    <updated>2021-11-17T10:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>随机生成端口,搬砖</p><span id="more"></span><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PORT=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断当前端口是否被占用，没被占用返回0，反之1</span></span><br><span class="line">function Listening {</span><br><span class="line">   TCPListeningnum=`netstat -an | grep ":$1 " | awk '$1 == "tcp" &amp;&amp; $NF == "LISTEN" {print $0}' | wc -l`</span><br><span class="line">   UDPListeningnum=`netstat -an | grep ":$1 " | awk '$1 == "udp" &amp;&amp; $NF == "0.0.0.0:*" {print $0}' | wc -l`</span><br><span class="line">   (( Listeningnum = TCPListeningnum + UDPListeningnum ))</span><br><span class="line">   if [ $Listeningnum == 0 ]; then</span><br><span class="line">       echo "0"</span><br><span class="line">   else</span><br><span class="line">       echo "1"</span><br><span class="line">   fi</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定区间随机数</span></span><br><span class="line">function random_range {</span><br><span class="line">   shuf -i $1-$2 -n1</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">得到随机端口</span></span><br><span class="line">function get_random_port {</span><br><span class="line">   templ=0</span><br><span class="line">   while [ $PORT == 0 ]; do</span><br><span class="line">       temp1=`random_range $1 $2`</span><br><span class="line">       if [ `Listening $temp1` == 0 ] ; then</span><br><span class="line">              PORT=$temp1</span><br><span class="line">       fi</span><br><span class="line">   done</span><br><span class="line">   echo "port=$PORT"</span><br><span class="line">}</span><br><span class="line">get_random_port 1 10000; #这里指定了1~10000区间，从中任取一个未占用端口号</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;随机生成端口,搬砖&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.wangzhiwei.online/categories/linux/"/>
    
    
    <category term="shell" scheme="https://blog.wangzhiwei.online/tags/shell/"/>
    
  </entry>
  
</feed>
